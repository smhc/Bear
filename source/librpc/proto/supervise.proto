/*  Copyright (C) 2012-2020 by László Nagy
    This file is part of Bear.

    Bear is a tool to generate compilation database for clang tooling.

    Bear is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    Bear is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

syntax = "proto3";

package supervise;
option cc_enable_arenas = true;

// This represents a (remote) supervisor process to set up program execution.
//
// A supervisor process executes a single program in the hope that it can
// get information about the state of the child process. But to decide what
// is the right strategy to intercept the relevant events from the child
// process can be done upfront.
//
// This interface describes a remote service which can be queried for how to
// execute the child program. Can resolve the executable name (in case of
// wrapper session) or update the environment variables (for both kind of
// sessions).
service Supervisor {

    // Resolve the executable name for the child process.
    //
    // Used in a wrapper session, when the build systems executes our wrapper
    // instead of the real command. Then the wrapper calls the supervisor to
    // find out which program is the real one to execute.
    rpc ResolveProgram (ResolveRequest) returns (ResolveResponse) {
    }

    // Update the environments for the child process.
    //
    // This is used for both wrapper and library sessions. The environment
    // variables are influencing how the processes behaves and which ones
    // are executed. It also specify the event sink (the interceptor) location.
    rpc Update (Environment) returns (Environment) {
    }
}

message ResolveRequest {
    string path = 1;
}

message ResolveResponse {
    string path = 1;
}

message Environment {
    map<string, string> values = 1;
}

// Represents the remote sink of supervised process events.
//
// Events from a process execution can be sent from many actors (mostly
// supervisor processes). The events are collected in a common place
// in order to reconstruct of final report of a build process.
service Interceptor {

    // Register a process related events.
    rpc Register (Event) returns (Empty) {}
}

// Represent a relevant life cycle event of a process.
//
// Currently it's only the process life cycle events (start, signal,
// terminate), but can be extended later with performance related
// events like monitoring the CPU usage or the memory allocation if
// those information are available to the the supervisor process.
message Event {

    // Required.
    uint64 rid = 1;

    // Required.
    uint32 pid = 2;

    // Optional.
    uint32 ppid = 3;

    // Required.
    // (ISO-8601 date-tie format with microsecond precision in UTC timezone)
    string timestamp = 4;

    reserved 5 to 10;

    // Required.
    oneof event {
        Started started = 11;
        Terminated terminated = 12;
        Signalled signalled = 13;
    }

    // Represents a successful process execution.
    message Started {
        // All fields are required.
        string executable = 3;
        repeated string arguments = 4;
        string working_dir = 5;
        map<string, string> environment = 6;
    }

    // Represents the termination of the supervised process.
    message Terminated {
        // Optional.
        // (Killed processes have no exit status.)
        int64 status = 1;
    }

    // Represents the supervised process received a signal.
    message Signalled {
        // Required.
        int32 number = 1;
    }
}

message Empty {}
